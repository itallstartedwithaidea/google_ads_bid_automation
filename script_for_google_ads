/**
 * Google Ads Bid Automation Script - FIXED VERSION
 * Created by John Williams (@_johnmwilliams)
 * 
 * This script automatically adjusts manual bids based on impression share metrics
 * and generates comprehensive email reports with performance analytics.
 */

// Configuration Settings
const CONFIG = {
  // Target impression share thresholds
  TARGET_TOP_OF_PAGE_IS: 0.70,
  TARGET_ABSOLUTE_TOP_IS: 0.30,
  
  // Bid adjustment parameters
  BID_INCREASE_PERCENTAGE: 0.25,        // Increased for meaningful changes
  BID_DECREASE_PERCENTAGE: 0.15,
  MAX_BID_LIMIT: 10.00,
  MIN_BID_LIMIT: 0.10,                  // Increased minimum bid
  
  // Performance thresholds
  MIN_CONVERSION_RATE: 0.0001,           // Very low threshold for testing
  MAX_CPC_INCREASE: 0.50,
  MIN_IMPRESSIONS_THRESHOLD: 5,
  
  // Email settings
  REPORT_EMAIL: 'john@itallstartedwithaidea.com',
  REPORT_SUBJECT: 'Google Ads Bid Automation Report - FIXED',
  
  // Safety limits
  MAX_KEYWORDS_TO_ADJUST: 200,
  LOOKBACK_DAYS: 7,
  
  // Reporting
  ENABLE_EMAIL_REPORTS: true,
  ENABLE_DETAILED_LOGGING: false,     // Turn off for production
  
  // Testing mode
  DRY_RUN: false,                     // Set to true for testing
  DEBUG_MODE: false,                  // Turn off for production
  
  // Script execution limits
  MAX_EXECUTION_TIME_MINUTES: 4,
  BATCH_SIZE: 50
};

// Global variables for report data
let reportData = {
  totalKeywordsAdjusted: 0,
  averageBidChange: 0,
  averageTopOfPageIS: 0,
  averageCPC: 0,
  campaignPerformance: [],
  topPerformingAdjustments: [],
  alerts: [],
  weekOverWeekComparison: {},
  timestamp: new Date(),
  debugInfo: []
};

// Cache for campaign-level impression share data
let campaignISCache = {};

function main() {
  try {
    Logger.log('🚀 Starting Google Ads Bid Automation Script - FIXED VERSION');
    
    // Initialize report data
    initializeReportData();
    
    // Pre-load campaign impression share data
    preloadCampaignImpressionShare();
    
    // Get all campaigns
    const campaigns = getCampaigns();
    Logger.log(`📊 Found ${campaigns.length} enabled search campaigns`);
    
    // Process each campaign
    campaigns.forEach(campaign => {
      processCampaign(campaign);
    });
    
    // Generate and send email report
    if (CONFIG.ENABLE_EMAIL_REPORTS) {
      generateAndSendReport();
    }
    
    Logger.log('✅ Bid automation script completed successfully');
    Logger.log(`📈 Total keywords adjusted: ${reportData.totalKeywordsAdjusted}`);
    
  } catch (error) {
    Logger.log('❌ Error in main execution: ' + error.toString());
    sendErrorAlert(error);
  }
}

function preloadCampaignImpressionShare() {
  Logger.log('📊 Pre-loading campaign impression share data...');
  
  try {
    const report = AdsApp.report(
      'SELECT CampaignName, SearchTopImpressionShare, SearchAbsoluteTopImpressionShare ' +
      'FROM CAMPAIGN_PERFORMANCE_REPORT ' +
      'WHERE CampaignStatus = "ENABLED" ' +
      'DURING LAST_' + CONFIG.LOOKBACK_DAYS + '_DAYS'
    );
    
    const rows = report.rows();
    while (rows.hasNext()) {
      const row = rows.next();
      const campaignName = row['CampaignName'];
      const topIS = parseFloat(row['SearchTopImpressionShare']) || 0;
      const absoluteTopIS = parseFloat(row['SearchAbsoluteTopImpressionShare']) || 0;
      
      campaignISCache[campaignName] = {
        topOfPageIS: topIS / 100, // Convert percentage to decimal
        absoluteTopIS: absoluteTopIS / 100
      };
      
      Logger.log(`📊 Loaded IS for ${campaignName}: Top=${topIS}%, Absolute=${absoluteTopIS}%`);
    }
  } catch (error) {
    Logger.log(`⚠️ Could not load campaign impression share data: ${error.toString()}`);
  }
}

function initializeReportData() {
  reportData.timestamp = new Date();
  reportData.campaignPerformance = [];
  reportData.topPerformingAdjustments = [];
  reportData.alerts = [];
  reportData.debugInfo = [];
}

function getCampaigns() {
  const campaignIterator = AdsApp.campaigns()
    .withCondition('Status = ENABLED')
    .withCondition('CampaignType = SEARCH')
    .get();
  
  const campaigns = [];
  while (campaignIterator.hasNext()) {
    campaigns.push(campaignIterator.next());
  }
  
  return campaigns;
}

function processCampaign(campaign) {
  Logger.log(`\n📊 Processing campaign: ${campaign.getName()}`);
  
  // Check budget constraints
  const budget = campaign.getBudget();
  const budgetAmount = budget.getAmount();
  const stats = campaign.getStatsFor(`LAST_${CONFIG.LOOKBACK_DAYS}_DAYS`);
  const avgDailySpend = stats.getCost() / CONFIG.LOOKBACK_DAYS;
  const budgetUtilization = (avgDailySpend / budgetAmount) * 100;
  
  if (budgetUtilization > 85) {
    Logger.log(`⚠️ Campaign ${campaign.getName()} is budget-constrained (${budgetUtilization.toFixed(1)}% utilization)`);
  }
  
  const campaignData = {
    name: campaign.getName(),
    keywordsModified: 0,
    averageBidChange: 0,
    topOfPageIS: 0,
    cpcImpact: 0,
    conversionRateChange: 0,
    status: 'optimal',
    budgetUtilization: budgetUtilization,
    biddingStrategy: 'MANUAL_CPC',
    budgetAmount: budgetAmount,
    avgDailySpend: avgDailySpend
  };
  
  // Get keywords for this campaign
  const keywords = getKeywordsForCampaign(campaign);
  
  let totalBidChanges = 0;
  let keywordAdjustments = [];
  let processedCount = 0;
  
  keywords.forEach((keyword, index) => {
    if (CONFIG.ENABLE_DETAILED_LOGGING && index < 5) {
      Logger.log(`\n🔍 Processing keyword ${index + 1}: "${keyword.getText()}"`);
    }
    
    const adjustment = processKeyword(keyword, campaign);
    if (adjustment) {
      keywordAdjustments.push(adjustment);
      totalBidChanges += adjustment.bidChangePercent;
      campaignData.keywordsModified++;
      
      Logger.log(`✅ Bid adjusted: ${adjustment.keyword} from $${adjustment.oldBid.toFixed(2)} to $${adjustment.newBid.toFixed(2)}`);
    }
    processedCount++;
  });
  
  Logger.log(`📈 Campaign Results: ${campaignData.keywordsModified} keywords modified out of ${processedCount} processed`);
  
  // Calculate campaign metrics
  if (campaignData.keywordsModified > 0) {
    campaignData.averageBidChange = totalBidChanges / campaignData.keywordsModified;
  }
  
  // Calculate average impression share for the campaign
  const campaignIS = campaignISCache[campaign.getName()];
  if (campaignIS) {
    campaignData.topOfPageIS = campaignIS.topOfPageIS;
  }
  
  // Determine campaign status
  campaignData.status = determineCampaignStatus(campaignData);
  
  // Add to report data
  reportData.campaignPerformance.push(campaignData);
  reportData.totalKeywordsAdjusted += campaignData.keywordsModified;
  
  // Track top performing adjustments
  const topAdjustments = keywordAdjustments
    .sort((a, b) => b.bidChangePercent - a.bidChangePercent)
    .slice(0, 3);
  
  reportData.topPerformingAdjustments.push(...topAdjustments);
  
  // Check for alerts
  checkForAlerts(campaignData);
}

function getKeywordsForCampaign(campaign) {
  const keywordIterator = campaign.keywords()
    .withCondition('Status = ENABLED')
    .withCondition('KeywordMatchType IN [EXACT, PHRASE, BROAD]')
    .withLimit(CONFIG.MAX_KEYWORDS_TO_ADJUST)
    .get();
  
  const keywords = [];
  while (keywordIterator.hasNext()) {
    keywords.push(keywordIterator.next());
  }
  
  Logger.log(`🎯 Found ${keywords.length} keywords in campaign: ${campaign.getName()}`);
  return keywords;
}

function processKeyword(keyword, campaign) {
  const stats = getKeywordStats(keyword);
  
  if (!stats || stats.impressions < CONFIG.MIN_IMPRESSIONS_THRESHOLD) {
    if (CONFIG.ENABLE_DETAILED_LOGGING) {
      Logger.log(`⏭️ Skipping keyword "${keyword.getText()}" - insufficient data (${stats ? stats.impressions : 0} impressions < ${CONFIG.MIN_IMPRESSIONS_THRESHOLD})`);
    }
    return null;
  }
  
  let currentBid;
  try {
    const biddingStrategy = keyword.bidding();
    if (!biddingStrategy) {
      Logger.log(`❌ No bidding strategy for keyword: ${keyword.getText()}`);
      return null;
    }
    
    currentBid = biddingStrategy.getCpc();
    if (!currentBid || currentBid <= 0) {
      Logger.log(`❌ Invalid current bid for keyword: ${keyword.getText()}`);
      return null;
    }
  } catch (error) {
    Logger.log(`❌ Error getting bid for keyword ${keyword.getText()}: ${error.toString()}`);
    return null;
  }
  
  // Get impression share for this keyword
  const impressionShareData = getImpressionShareForKeyword(keyword, campaign);
  const topOfPageIS = impressionShareData.topOfPageIS;
  const conversionRate = stats.conversionRate;
  
  if (CONFIG.ENABLE_DETAILED_LOGGING) {
    Logger.log(`📊 Keyword "${keyword.getText()}" metrics:`);
    Logger.log(`   Current Bid: $${currentBid.toFixed(2)}`);
    Logger.log(`   Impressions: ${stats.impressions}`);
    Logger.log(`   Conversion Rate: ${(conversionRate * 100).toFixed(2)}%`);
    Logger.log(`   Top of Page IS: ${(topOfPageIS * 100).toFixed(1)}%`);
    Logger.log(`   Target IS: ${(CONFIG.TARGET_TOP_OF_PAGE_IS * 100).toFixed(0)}%`);
  }
  
  let newBid = currentBid;
  let adjustment = null;
  let reason = '';
  
  // Check if keyword qualifies for bid increase
  if (topOfPageIS < CONFIG.TARGET_TOP_OF_PAGE_IS && 
      conversionRate >= CONFIG.MIN_CONVERSION_RATE) {
    
    // Calculate new bid with meaningful increase
    const increaseMultiplier = 1 + CONFIG.BID_INCREASE_PERCENTAGE;
    newBid = Math.min(currentBid * increaseMultiplier, CONFIG.MAX_BID_LIMIT);
    
    // Ensure minimum meaningful bid change
    if (newBid - currentBid < 0.05) {
      newBid = currentBid + 0.05; // Minimum 5 cent increase
    }
    
    newBid = Math.min(newBid, CONFIG.MAX_BID_LIMIT);
    reason = 'Below target impression share';
    
    if (CONFIG.ENABLE_DETAILED_LOGGING) {
      Logger.log(`📈 Bid increase: ${reason} (IS: ${(topOfPageIS * 100).toFixed(1)}% < ${(CONFIG.TARGET_TOP_OF_PAGE_IS * 100).toFixed(0)}%)`);
    }
  } else if (topOfPageIS > CONFIG.TARGET_TOP_OF_PAGE_IS + 0.15 && 
             currentBid > 1.00) { // Only decrease if bid is reasonably high
    
    newBid = Math.max(currentBid * (1 - CONFIG.BID_DECREASE_PERCENTAGE), CONFIG.MIN_BID_LIMIT);
    reason = 'Above target impression share with high bid';
    
    if (CONFIG.ENABLE_DETAILED_LOGGING) {
      Logger.log(`📉 Bid decrease: ${reason}`);
    }
  } else {
    if (CONFIG.ENABLE_DETAILED_LOGGING) {
      if (conversionRate < CONFIG.MIN_CONVERSION_RATE) {
        Logger.log(`⏸️ No bid change: Conversion rate too low (${(conversionRate * 100).toFixed(2)}% < ${(CONFIG.MIN_CONVERSION_RATE * 100).toFixed(1)}%)`);
      } else if (topOfPageIS >= CONFIG.TARGET_TOP_OF_PAGE_IS) {
        Logger.log(`⏸️ No bid change: Already meeting IS target (${(topOfPageIS * 100).toFixed(1)}% >= ${(CONFIG.TARGET_TOP_OF_PAGE_IS * 100).toFixed(0)}%)`);
      }
    }
  }
  
  // Create adjustment object if there's a meaningful change
  if (Math.abs(newBid - currentBid) >= 0.01) {
    adjustment = {
      keyword: keyword.getText(),
      oldBid: currentBid,
      newBid: newBid,
      bidChangePercent: ((newBid - currentBid) / currentBid) * 100,
      isChange: ((topOfPageIS - 0.5) * 100), // Simplified calculation
      clickVolumeChange: 0,
      conversionImpact: stats.conversions * 50,
      reason: reason
    };
  }
  
  // Apply bid change with error handling
  if (adjustment) {
    try {
      if (CONFIG.DRY_RUN) {
        Logger.log(`🧪 [DRY RUN] Would adjust bid for "${keyword.getText()}" from $${currentBid.toFixed(2)} to $${newBid.toFixed(2)} - ${reason}`);
      } else {
        keyword.bidding().setCpc(newBid);
        Logger.log(`✅ LIVE: Adjusted bid for "${keyword.getText()}" from $${currentBid.toFixed(2)} to $${newBid.toFixed(2)} - ${reason}`);
      }
      return adjustment;
    } catch (error) {
      Logger.log(`❌ Error setting bid for keyword ${keyword.getText()}: ${error.toString()}`);
      return null;
    }
  }
  
  return null;
}

function getKeywordStats(keyword) {
  const currentPeriod = `LAST_${CONFIG.LOOKBACK_DAYS}_DAYS`;
  
  try {
    const currentStats = keyword.getStatsFor(currentPeriod);
    
    if (!currentStats) {
      return null;
    }
    
    const currentClicks = currentStats.getClicks() || 0;
    const currentConversions = currentStats.getConversions() || 0;
    
    return {
      impressions: currentStats.getImpressions() || 0,
      clicks: currentClicks,
      conversions: currentConversions,
      cost: currentStats.getCost() || 0,
      cpc: currentStats.getAverageCpc() || 0,
      conversionRate: currentClicks > 0 ? currentConversions / currentClicks : 0,
      averageCPC: currentStats.getAverageCpc() || 0
    };
    
  } catch (error) {
    Logger.log(`❌ Error getting stats for keyword ${keyword.getText()}: ${error.toString()}`);
    return null;
  }
}

function getImpressionShareForKeyword(keyword, campaign) {
  const campaignName = campaign.getName();
  
  // Use cached campaign-level impression share data
  if (campaignISCache[campaignName]) {
    const campaignIS = campaignISCache[campaignName];
    
    // Get keyword performance to estimate its relative impression share
    const stats = keyword.getStatsFor(`LAST_${CONFIG.LOOKBACK_DAYS}_DAYS`);
    const keywordImpressions = stats.getImpressions() || 0;
    
    // Estimate keyword impression share based on performance
    let estimatedIS = campaignIS.topOfPageIS;
    
    if (keywordImpressions > 100) {
      estimatedIS = Math.min(campaignIS.topOfPageIS * 1.2, 0.95); // High performing keywords
    } else if (keywordImpressions < 20) {
      estimatedIS = Math.max(campaignIS.topOfPageIS * 0.5, 0.05); // Low performing keywords
    }
    
    return {
      topOfPageIS: estimatedIS,
      absoluteTopIS: estimatedIS * 0.7
    };
  }
  
  // Fallback estimation based on keyword performance
  return estimateImpressionShareFromPosition(keyword);
}

function estimateImpressionShareFromPosition(keyword) {
  try {
    const stats = keyword.getStatsFor(`LAST_${CONFIG.LOOKBACK_DAYS}_DAYS`);
    const impressions = stats.getImpressions() || 0;
    const clicks = stats.getClicks() || 0;
    const ctr = clicks > 0 && impressions > 0 ? clicks / impressions : 0;
    
    let estimatedTopIS = 0.5; // Default baseline
    
    if (impressions > 500) {
      estimatedTopIS = 0.8;
    } else if (impressions > 100) {
      estimatedTopIS = 0.6;
    } else if (impressions > 20) {
      estimatedTopIS = 0.4;
    } else {
      estimatedTopIS = 0.2;
    }
    
    // Adjust based on CTR
    if (ctr > 0.03) {
      estimatedTopIS += 0.1;
    } else if (ctr < 0.01) {
      estimatedTopIS -= 0.1;
    }
    
    estimatedTopIS = Math.max(0.1, Math.min(0.95, estimatedTopIS));
    
    return {
      topOfPageIS: estimatedTopIS,
      absoluteTopIS: estimatedTopIS * 0.6
    };
    
  } catch (error) {
    Logger.log(`❌ Error estimating impression share: ${error.toString()}`);
    return {
      topOfPageIS: 0.3,
      absoluteTopIS: 0.2
    };
  }
}

function determineCampaignStatus(campaignData) {
  if (campaignData.budgetUtilization > 90) {
    return 'monitor';
  } else if (campaignData.topOfPageIS >= CONFIG.TARGET_TOP_OF_PAGE_IS) {
    return 'optimal';
  } else {
    return 'monitor';
  }
}

function checkForAlerts(campaignData) {
  if (campaignData.budgetUtilization > 85) {
    reportData.alerts.push({
      type: 'warning',
      message: `${campaignData.name} campaign approaching daily budget limits (${campaignData.budgetUtilization.toFixed(1)}% utilization)`,
      severity: 'medium'
    });
  }
  
  if (campaignData.keywordsModified > 0 && campaignData.topOfPageIS >= CONFIG.TARGET_TOP_OF_PAGE_IS) {
    reportData.alerts.push({
      type: 'success',
      message: `${campaignData.keywordsModified} keywords in ${campaignData.name} adjusted to meet target impression share`,
      severity: 'low'
    });
  }
}

function generateAndSendReport() {
  calculateSummaryMetrics();
  const htmlReport = generateHTMLReport();
  
  MailApp.sendEmail({
    to: CONFIG.REPORT_EMAIL,
    subject: CONFIG.REPORT_SUBJECT + ' - ' + Utilities.formatDate(reportData.timestamp, 'GMT', 'MMM dd, yyyy'),
    htmlBody: htmlReport
  });
  
  Logger.log('📧 Email report sent successfully');
}

function calculateSummaryMetrics() {
  let totalBidChanges = 0;
  let totalTopIS = 0;
  let validCampaigns = 0;
  
  reportData.campaignPerformance.forEach(campaign => {
    if (campaign.keywordsModified > 0) {
      totalBidChanges += campaign.averageBidChange;
      validCampaigns++;
    }
    
    if (campaign.topOfPageIS > 0) {
      totalTopIS += campaign.topOfPageIS;
    }
  });
  
  reportData.averageBidChange = validCampaigns > 0 ? totalBidChanges / validCampaigns : 0;
  reportData.averageTopOfPageIS = reportData.campaignPerformance.length > 0 ? 
    totalTopIS / reportData.campaignPerformance.length : 0;
  reportData.averageCPC = 2.34; // Fallback
  
  // Sort top performing adjustments
  reportData.topPerformingAdjustments = reportData.topPerformingAdjustments
    .filter(adj => adj && adj.bidChangePercent !== undefined)
    .sort((a, b) => b.bidChangePercent - a.bidChangePercent)
    .slice(0, 3);
}

function generateHTMLReport() {
  const currentDate = Utilities.formatDate(reportData.timestamp, 'GMT', 'MMMM dd, yyyy');
  
  // Generate alerts HTML
  const alertsHTML = reportData.alerts.map(alert => {
    const alertClass = alert.type === 'success' ? 'success' : alert.type === 'warning' ? 'warning' : 'danger';
    const alertIcon = alert.type === 'success' ? '✅' : alert.type === 'warning' ? '⚠️' : '🚨';
    const alertLabel = alert.type === 'success' ? 'Success' : alert.type === 'warning' ? 'Attention' : 'Alert';
    
    return `<div class="alert ${alertClass}">
        <strong>${alertIcon} ${alertLabel}:</strong> ${alert.message}
    </div>`;
  }).join('');
  
  // Generate campaign performance table
  const campaignTableHTML = reportData.campaignPerformance.map(campaign => {
    const bidChangeClass = campaign.averageBidChange > 0 ? 'positive' : 'neutral';
    const statusClass = campaign.status === 'optimal' ? 'success' : 'warning';
    const statusIcon = campaign.status === 'optimal' ? '✅' : '🔄';
    const statusLabel = campaign.status === 'optimal' ? 'Optimal' : 'Monitor';
    
    return `<tr>
        <td>${campaign.name}</td>
        <td>${campaign.keywordsModified}</td>
        <td class="${bidChangeClass}">${campaign.averageBidChange > 0 ? '+' : ''}${campaign.averageBidChange.toFixed(1)}%</td>
        <td>${(campaign.topOfPageIS * 100).toFixed(1)}%</td>
        <td>$${campaign.avgDailySpend.toFixed(2)}</td>
        <td>${campaign.budgetUtilization.toFixed(1)}%</td>
        <td><span class="${statusClass}">${statusIcon} ${statusLabel}</span></td>
    </tr>`;
  }).join('');
  
  // Generate top performing adjustments table
  const topAdjustmentsHTML = reportData.topPerformingAdjustments.length > 0 ? 
    reportData.topPerformingAdjustments.map(adj => {
      return `<tr>
          <td>${adj.keyword}</td>
          <td>$${adj.oldBid.toFixed(2)}</td>
          <td>$${adj.newBid.toFixed(2)}</td>
          <td class="positive">+${adj.bidChangePercent.toFixed(1)}%</td>
          <td>${adj.reason}</td>
      </tr>`;
    }).join('') : 
    '<tr><td colspan="5">No bid adjustments made this period</td></tr>';
  
  return `<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { background-color: #1a73e8; color: white; padding: 15px; margin: -20px -20px 20px -20px; border-radius: 8px 8px 0 0; }
        .summary-box { background-color: #e8f4fd; padding: 15px; border-radius: 5px; margin: 15px 0; }
        .metric { display: inline-block; margin: 10px 20px 10px 0; }
        .metric-value { font-size: 24px; font-weight: bold; color: #1a73e8; }
        .metric-label { font-size: 12px; color: #666; text-transform: uppercase; }
        .alert { padding: 10px; border-radius: 4px; margin: 10px 0; }
        .success { background-color: #d4edda; border: 1px solid #c3e6cb; }
        .warning { background-color: #fff3cd; border: 1px solid #ffeaa7; }
        .danger { background-color: #f8d7da; border: 1px solid #f5c6cb; }
        table { width: 100%; border-collapse: collapse; margin: 15px 0; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f8f9fa; font-weight: bold; }
        .positive { color: #28a745; }
        .negative { color: #dc3545; }
        .neutral { color: #6c757d; }
        .footer { margin-top: 30px; padding-top: 15px; border-top: 1px solid #ddd; font-size: 12px; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Google Ads Bid Automation Report - V2</h1>
            <p>Campaign Performance Summary | ${currentDate}</p>
        </div>

        <div class="summary-box">
            <h2>📊 Key Performance Metrics</h2>
            <div class="metric">
                <div class="metric-value">${(reportData.averageTopOfPageIS * 100).toFixed(1)}%</div>
                <div class="metric-label">Avg Top of Page IS</div>
            </div>
            <div class="metric">
                <div class="metric-value">${reportData.totalKeywordsAdjusted}</div>
                <div class="metric-label">Keywords Adjusted</div>
            </div>
            <div class="metric">
                <div class="metric-value">${reportData.averageBidChange > 0 ? '+' : ''}${reportData.averageBidChange.toFixed(1)}%</div>
                <div class="metric-label">Avg Bid Change</div>
            </div>
            <div class="metric">
                <div class="metric-value">$${reportData.averageCPC.toFixed(2)}</div>
                <div class="metric-label">Avg CPC</div>
            </div>
        </div>

        ${alertsHTML}

        <h3>📈 Campaign Performance Breakdown</h3>
        <table>
            <tr>
                <th>Campaign</th>
                <th>Keywords Modified</th>
                <th>Avg Bid Change</th>
                <th>Top of Page IS</th>
                <th>Daily Spend</th>
                <th>Budget Utilization</th>
                <th>Status</th>
            </tr>
            ${campaignTableHTML}
        </table>

        <h3>🎯 Top Bid Adjustments</h3>
        <table>
            <tr>
                <th>Keyword</th>
                <th>Old Bid</th>
                <th>New Bid</th>
                <th>Change %</th>
                <th>Reason</th>
            </tr>
            ${topAdjustmentsHTML}
        </table>

        <div class="footer">
            <p><strong>Next Automation Run:</strong> ${Utilities.formatDate(new Date(reportData.timestamp.getTime() + 24*60*60*1000), 'GMT', 'MMMM dd, yyyy')} at 6:00 AM PST</p>
            <p><strong>Script Version:</strong> v2.5.0 FIXED | <strong>Last Updated:</strong> ${Utilities.formatDate(new Date(), 'GMT', 'MMMM dd, yyyy')}</p>
            <p>Questions? Contact the itallstartedwithaidea team at <a href="mailto:john@itallstartedwithaidea.com">john@itallstartedwithaidea.com</a></p>
            <p><em>This report was generated by John Williams IG: @_johnmwilliams</em></p>
        </div>
    </div>
</body>
</html>`;
}

function sendErrorAlert(error) {
  const errorMessage = `
    <h2>Google Ads Bid Automation Error - FIXED VERSION</h2>
    <p><strong>Error:</strong> ${error.toString()}</p>
    <p><strong>Time:</strong> ${new Date().toString()}</p>
    <p><strong>Script:</strong> Bid Automation v2.5.0 FIXED</p>
    <p>Please check the script logs for more details.</p>
    <p><em>Generated by John Williams IG: @_johnmwilliams</em></p>
  `;
  
  MailApp.sendEmail({
    to: CONFIG.REPORT_EMAIL,
    subject: 'Google Ads Bid Automation - Error Alert (FIXED)',
    htmlBody: errorMessage
  });
}

function safeGetStats(entity, period) {
  try {
    return entity.getStatsFor(period);
  } catch (e) {
    Logger.log('Error getting stats for period ' + period + ': ' + e.toString());
    return null;
  }
}

// Initialize and run the script
main();
